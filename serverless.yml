# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-toDoList-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}  
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createUser:
    handler: user/create.createUser
    events:
      - http:
          path: users
          method: post
          cors: true
  
  findAllUser:
    handler: user/fetch.findAllUsers
    events:
      - http:
          path: users
          method: get
          cors: true
  
  findOneUser:
    handler: user/fetch.findOneUser
    events:
      - http:
          path: users/{userId}
          method: get
          cors: true

  updateUser:
    handler: user/update.editUser
    events:
     - http:
        path: users/{userId}
        method: put
        cors: true

  deleteUser:
    handler: user/delete.deleteUser
    events:
      - http:
          path: users/{userId}
          method: delete
          cors: true

  createTask:
    handler: task/create.createTask
    events:
      - http:
          path: users/{userId}/tasks
          method: post
          cors: true
  
  findAllTask:
    handler: user/fetch.findAllTasks
    events:
      - http:
          path: users/{userId}/tasks
          method: get
          cors: true
  
  findOneTask:
    handler: user/fetch.findOneTask
    events:
      - http:
          path: users/{userId}/tasks/{taskId}
          method: get
          cors: true

  updateTask:
    handler: user/update.editTask
    events:
     - http:
        path: users/{userId}/tasks/{taskId}
        method: put
        cors: true

  deleteTask:
    handler: task/delete.deleteTask
    events:
      - http:
          path: users/{userId}/tasks/{taskId}
          method: delete
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
